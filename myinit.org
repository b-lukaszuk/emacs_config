#+TITLE: My emacs config
#+STARTUP: overview
#+STARTUP: indent
#+OPTIONS: \n: t

* Table of Contents :toc:
- [[#user-interface][User Interface]]
- [[#default-text-scale][Default Text Scale]]
- [[#diminish][Diminish]]
- [[#cl-lib][Cl Lib]]
- [[#utility-functions][Utility Functions]]
   + [[#time-measurement][Time Measurement]]
   + [[#remove-trailing-whitespaces-and-tabs][Remove Trailing Whitespaces and Tabs]]
   + [[#kill-other-buffers][Kill Other Buffers]]
   + [[#paste-text-from-clipboard-to-minibuffer][Paste Text from Clipboard to Minibuffer]]
   + [[#change-keyboard-language][Change Keyboard Language]]
   + [[#etags][Etags]]
   + [[#eshell-clear-command][Eshell Clear Command]]
- [[#org-mode][Org Mode]]
- [[#org-roam][Org Roam]]
- [[#iedit][Iedit]]
- [[#avy][Avy]]
- [[#parenthesis-and-brackets][Parenthesis and Brackets]]
- [[#evil-and-evil-like][Evil and Evil Like]]
- [[#window-numbering][Window Numbering]]
- [[#nlinum-relative][Nlinum Relative]]
- [[#helm][Helm]]
- [[#crux][Crux]]
- [[#ess][ESS]]
- [[#python][Python]]
- [[#ein][EIN]]
- [[#zoom-window][Zoom Window]]
- [[#magit][Magit]]
- [[#neotree][Neotree]]
- [[#haskell][Haskell]]
- [[#slime][Slime]]
- [[#dired][Dired]]
- [[#auto-complete][Auto Complete]]
- [[#company][Company]]
- [[#snippets][Snippets]]
- [[#origami][Origami]]
- [[#eglot][Eglot]]
- [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#highlight-indent-guides][Highlight Indent Guides]]
- [[#pdf-tools][PDF Tools]]
- [[#emacs-code-browser][Emacs Code Browser]]
- [[#javascript-and-typescript][JS/TS]]
- [[#web-mode][Web Mode]]
- [[#emmet-mode][Emmet Mode]]
- [[#which-key][Which Key]]
- [[#emacs-x-window-manager][Emacs X Window Manager]]
- [[#autosave-files][Autosave Files]]
- [[#command-log-mode][Command Log Mode]]
- [[#dumb-jump][Dumb Jump]]
- [[#language-servers][Language Servers]]
- [[#scala][Scala]]

* User Interface

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp
  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (i custom-enabled-themes)
      (disable-theme i)))

  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes)) ; loading a theme will first disable the old one
    ;; otherwise after a few reloadings its gonna look ugly

  (load-theme 'wheatgrass)

  ;; wylaczenie wyswietlania menu-baru i tool-bar (gora okienka)
  (menu-bar-mode -1)
  (tool-bar-mode -1)

  (set-language-environment "UTF-8")

  (setq column-number-mode t)

  ;; podswietlanie pasujacych nawiasow
  (show-paren-mode 1)
  (setq show-paren-style 'parenthesis)

  ;; highlight line with the cursor, preserving the colours.
  ;; load-theme -> themy przy ktorych te ustawienia sa ok
  ;; ciemny: wheatgras, misterioso, tsdh
  ;; jasny: tsdh-light, light-blue
  (global-hl-line-mode +1)
  (set-face-background 'hl-line "gray15")
  (set-face-foreground 'highlight nil)

  ;; stop emacs from creating backup files
  (setq make-backup-files nil)

  ;; usuwanie duplikatow z historii komend
  (setq history-delete-duplicates t)

  ;; zasada 80 kolumny
  (global-display-fill-column-indicator-mode 1)
  ; M-x customize-variable RET fill-column

#+END_SRC

#+RESULTS:

* Default Text Scale

[[#table-of-contents][Go to: Table of Contents]]

Domyslne C-x C-+, lub C-x C-- zmienia rozmiar czcionki tylko dla jedego buforu
ten minor mode dziala dla wszystkich buforow.

Skroty zapewniane przez ten mod: C-M-= oraz C-M--

#+BEGIN_SRC emacs-lisp

(use-package default-text-scale
  :ensure t
  :pin melpa-stable
  :diminish default-text-scale
  :bind
  ("C-M-=" . #'default-text-scale-increase)
  ("C-M--" . #'default-text-scale-decrease)
  ("C-M-0" . #'default-text-scale-reset))

#+END_SRC

* Diminish

[[#table-of-contents][Go to: Table of Contents]]

potrzebny do dzialania keyword-a
:diminish
w use-package (nie wysietla nazwy minor moda na pasku)

#+BEGIN_SRC emacs-lisp

(use-package diminish
  :ensure t
  :pin melpa-stable)

#+END_SRC

* Cl Lib

[[#table-of-contents][Go to: Table of Contents]]

(kompatybilnosc z common-lisp)

Potrzebne do dzialania moich funcji liczacych czas (podlicz wiersz, tydzien, itd.)

Nastepca moda/biblioteki cl, funckje common lispa sa poprzedzone przedrostkiem "cl-", np. cl-first, cl-second

#+BEGIN_SRC emacs-lisp

(use-package cl-lib
  :ensure t
  :pin melpa-stable
  :defer t)

#+END_SRC

* Utility Functions

[[#table-of-contents][Go to: Table of Contents]]

** Time Measurement

[[#table-of-contents][Go to: Table of Contents]]

*** Wstaw-godz:min

(wstawia aktualny czas w formacie "HH:MM")

#+BEGIN_SRC emacs-lisp

(defun my/wstaw-godz-min () ; aktualny czas wstawiamy w trybie insert-mode (evil-a)
  (interactive)

  ;; deklaracja zmiennych pomocniczych
  (let ((znak-pop (char-before)) ; sprawdzamy znak przed pointem
	(co-wstawic
	 (replace-regexp-in-string "\n" "" ; shell-command-to-string wstawia tekst ze znakiem nowej linii
				   (shell-command-to-string "date +'%H:%M'")))) ; wstawiamy aktualny czas

    (if (= znak-pop 45) ; ascii 45 to "-"
	;; jesli wczesniej bylo "-" to wstawiamy tylko string "HH:MM"
	(insert co-wstawic)
      ;; a jesli nie to wstawiamy string "HH:MM-"
      (insert (concat co-wstawic "-")))))

#+END_SRC

*** Podlicz wiersz

oblicza ile minut (np. nauki niemieckiego jest w wierszu), tj.
zamienia wiersz w stylu:

~<2019-06-20 Thu> 06:30-06:50 10:10-10:30~ na ~<2019-06-20 Thu> 06:30-06:50 10:10-10:30 40 min~

nie trzeba wizualnie zaznaczyc wiersza
(funkcja robi to sama, ale nawet tego nie widac)

czas nie moze obejmowac 00:00, tj. np. 23:57-00:03 spowoduje bledne obliczenia

#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; ponizsza funkcja zamienia godz na min, np. "10:10"
    ;; to 610 min (10h 10min) po polnocy (00:00)
    ;; czas nie moze obejmowac "00:00", tj. np. "23:57-00:03"
    ;; spowoduje bledne obliczenia (wartosci ujemne)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my/godz_min-do-min (str_czas) ; str_czas to "HH:MM"
  (let* ((lst-of-str-godz-min (split-string str_czas ":")) ; dzieli string na godz i min
         (int-godz (string-to-number (car lst-of-str-godz-min)))
         (int-min (string-to-number (car (cdr lst-of-str-godz-min)) )))
    (+ (* 60 int-godz) int-min))) ; zwraca ilosc minut po polnocy (int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ponizsza funkcja oblicza ile minut minelo od do,
  ;; np. jesli zaczelem sie uczyc o 10:10
  ;; a skonczylem o 10:30 to minelo 20 min
  ;; string wejsciowy w tym przypadku to "10:10-10:30"
  ;; czas nie moze obejmowac "00:00", tj. "23:57-00:03" spowoduje bledne obliczenia
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my/czas-od-do (str-czas-od-do) ; str-czas-od-do jest w formacie "HH:MM-HH:MM"
  (let* ((lst-of-str-czas1-czas2 (split-string str-czas-od-do "-"))
         (int-czas1-start (my/godz_min-do-min (car lst-of-str-czas1-czas2)))
         (int-czas2-koniec (my/godz_min-do-min (car (cdr lst-of-str-czas1-czas2)))))
    (- int-czas2-koniec int-czas1-start))) ; zwraca ilosc min miedzy 2 godzinami (int)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ponizsza funkcja wydobywa godz:min ze stringu w postaci
  ;;" <2019-06-20 Thu> 06:30-06:50 10:10-10:30"
  ;; lub
  ;; "<2019-06-20 Thu> 06:30-06:50 10:10-10:30 40 min"
  ;; i zwraca jes jako liste stringow ("HH:MM-HH:MM" "HH:MM-HH:MM")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my/wydobadz-godz_min (linijka-tekstu) ; linijka-tekstu to string
  (let  ((tekst linijka-tekstu))
    (setq tekst (replace-regexp-in-string "^.*> " "" linijka-tekstu))
    (setq tekst (replace-regexp-in-string " [0-9]+ min *" "" tekst))
    (split-string tekst " +")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ponizsza funkcja podlicza ile jest minut treningu w kazedj linijce
  ;; przyjmuje linijke (string w postaci):
  ;; "<2019-06-20 Thu> 06:30-06:50 10:10-10:30"
  ;; lub
  ;; "<2019-06-20 Thu> 06:30-06:50 10:10-10:30 40 min"
  ;; zwraca (wstawia do buforu/pliku) linijke w postaci
  ;; "<2019-06-20 Thu> 06:30-06:50 10:10-10:30 40 min" (oczywiscie bez ")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun my/wiersz-podlicz ()
  (interactive) ; potrzebne do wywolania przez M-x

  ;; pozycja punktu przed wszystkimi operacjami
  (let ((pocz-poz-punktu (point)))
    ;; ponizsze 3 linijki aby zaznaczyc wizualnie linijke tekstu
    ;; (wczesniej robilem tak z klawiatury)
    ;; (samo evilowe "V" zostawia kursor na pocz linijki)
    ;; (a evilowa sekwencja: "0v$"), coz, nie chce mi sie jej ciagle wklepywac
    (evil-digit-argument-or-evil-beginning-of-line)
    (evil-visual-block)
    (evil-end-of-line)

      ;;; teraz linijki obliczajace czas i wstawiajace min na koncu linijki
    (let* ((wczytany-tekst (buffer-substring (point) (mark)))
	   (wczytany-tekst-bez-min (replace-regexp-in-string " [0-9]+ min *$" "" wczytany-tekst))
	   (suma 0)
	   (str-do-zwrotu "")) ; string ktory zwroci/wypisze ta funkcja (na razie blank)

      (dolist (elt (my/wydobadz-godz_min wczytany-tekst))
	(cl-incf suma (my/czas-od-do elt))) ; dodaj liczbe minut z kazdej krotkiej sesji
      (setq str-do-zwrotu
	    (replace-regexp-in-string
	     "$" ; zastap co:  wirtualny koniec linijki
	     (concat " " (number-to-string suma) " min") ; zastap czym: liczba minut z dop min
	     wczytany-tekst-bez-min)) ; zrob to we wczytanym tekscie
      (delete-region (point) (mark)) ; usuwa wczytana linijke tekstu
      (insert str-do-zwrotu)) ; aby ja zastapic tekstem z podliczonymi minutami

    ;; powrot do poczatkowej pozycji punktu
    (goto-char pocz-poz-punktu)))

#+END_SRC

*** Podlicz tydzien

podlicza sume minut (cyfry przed " min") i sume pln (cyfry przed " pln") z zaznaczonego tekstu

#+BEGIN_SRC emacs-lisp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; ponizsza funkcja rozbija blok tekstu na pojedyncze linijki
    ;; zwraca liste stringow (czyli pojedyncze linijki)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my/blok-tekstu-do-lista-linijek (blok-tekstu)
  (split-string blok-tekstu "\n"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; ponizsza funkcja rozbija linijke tekstu na pojedyncze wyrazy
    ;; zwraca liste stringow (wyrazy w zdaniu w odwroconej kolejnosci)
    ;; zamienia string "ala ma kota"
    ;; na liste ("kota" "ma" "ala")
    ;; potrzebne by na koncu niektorych linijek jest, np. "124 min"
    ;; lub "100 pln"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my/odwroc-kolejn-slow-w-linijce (ln-tkstu)
   (reverse (split-string ln-tkstu " ")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; ponizsza funkcja wczytuje blok tekstu
    ;; in na podstawie pol typu: "124 min"
    ;; "100 pln"
    ;; podlicza czas i koszt i wyswietla to w minibuforze
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my/tydzien-podlicz ()
  (interactive) ; do wywolania przez M-x

  ;; zmienne pomocnicze
  (let* ((wczytany-tekst (buffer-substring (point) (mark)))
	 (linijki-tekstu (my/blok-tekstu-do-lista-linijek wczytany-tekst)) ; lista, ktorej kazdy elt to linia tekstu
	 (suma-pln 0) (suma-min 0) (suma-godz 0)) ; zmienne do obliczenia

    ;; obliczenia suma minut/pln (w zaleznosci od tego czy na koncu linijki jest, np. "120 min" czy "120 pln")
    ;; aby to zrobic odwraca kolejnosc wyrazow w linijce
    (dolist (jedna-linijka linijki-tekstu)
      (let ((linijka-od-tylu (my/odwroc-kolejn-slow-w-linijce jedna-linijka))) ; lista wyrazow w linijce od tylu
	(cond ((string= (car linijka-od-tylu) "min")
	       (cl-incf suma-min (string-to-number (cl-second linijka-od-tylu)))) ; dodaje minuty
	      ((string= (car linijka-od-tylu) "pln")
	       (cl-incf suma-pln (string-to-number (cl-second linijka-od-tylu))))))) ; dodaje pln-y

    (cl-incf suma-godz (/ suma-min 60.0)) ; zamienia minuty nauki na godziny

    (message "%d min, czyli %.2f godz.\noraz %d pln" suma-min suma-godz suma-pln)))

#+END_SRC

** Remove trailing whitespaces and tabs

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

(defun my/trim-trailing-whitespace-chars (tekst)
  "trims strayed trailing whitespaces and tabs from the code"
  (replace-regexp-in-string
   "\t+$" "" (replace-regexp-in-string " +$" "" tekst)))

(defun my/remove-trailing-whitespaces-from-curr-buffer ()
  "removes trailing whitespace chars (spaces and tabs)
  from end of lines"
  (interactive)

  (let ((poz-startowa (point))
	(tekst-z-tego-bufora
	 (buffer-substring-no-properties (point-min) (point-max))))
    (delete-region (point-min) (point-max)) ; usuniecie tekstu z bufora
					; zastapienie czystszym tesktem
    (insert (my/trim-trailing-whitespace-chars tekst-z-tego-bufora))
					; powrot do pozycji startowej
    (goto-char poz-startowa))
    (message "trailing whtiespaces ( +$) and tabs (\t+$) has been removed"))


#+END_SRC

** Kill Other Buffers

[[#table-of-contents][Go to: Table of Contents]]

Do zabicia pozostalych buforow (oprocz tego w ktorym aktualnie jestesmy)

Przydatene jesli sie ich za duzo nazbieralo po dniu pracy i ciezko manewrowac)

#+BEGIN_SRC emacs-lisp

(defun kill-other-buffers ()
  (interactive)
    (mapc 'kill-buffer (cdr (buffer-list (current-buffer)))))

#+END_SRC

** Change Keyboard Language

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

;; swap caps-esc
;; https://superuser.com/questions/396988/how-to-remap-capslock-to-esc-in-linux-mint-12

;; ustawia uklad klawiatury na polski
(defun my/keyboard-pol ()
  (interactive) ; do wywolania przez M-x
  (shell-command "setxkbmap pl") ; klawiatura pl
  (shell-command "xmodmap ~/.Xmodmap") ; swap Caps-Esc
)

;; ustawia uklad klawiatury na angielski
(defun my/keyboard-us ()
  (interactive) ; do wywolania przez M-x
  (shell-command "setxkbmap us") ; klawiatura us
  (shell-command "xmodmap ~/.Xmodmap") ; swap Caps-Esc
)

#+END_SRC
** Eshell Clear Command

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

(defun my/eshell-clear ()
  "czysci bufor eshell-a"
  (interactive)
  (eshell/clear 1))

(add-hook 'eshell-mode-hook
	  (lambda ()
	    (define-key
	      eshell-mode-map (kbd "C-c M-o") #'my/eshell-clear)))

#+END_SRC

** Etags

[[#table-of-contents][Go to: Table of Contents]]

Tworzy plik TAGS (komenda bashowa etags)
umozliwiajacy skakanie do definicji (funkcji, metod, klas)
miedzy plikami w folderze i jego podfolderach

#+BEGIN_SRC emacs-lisp

(defun my/create-etags ()
  "
    tworzy etagsy dla wszystkich plikow
    z rozszerzeniem nazwy aktualnie edytowanego pliku.
    punkt wyjscia to folder aktualnie edytowanego pliku.
    uwzglednia pliki z tym rozszerzeniem w podfolderach.
  "
  (interactive) ; do wywolania przez M-x
  (message (format "stworzono etags-y"))
  (shell-command-to-string
   (format
    "find . -name \"*.%s\" -print | xargs etags --append"
    (car (last
	  (split-string buffer-file-name "\\."))))))

#+END_SRC

* Org Mode

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

(use-package org
  :ensure t
  :pin melpa-stable
  :defer t
  :bind
  (:map org-mode-map ; uzywanie napisanych przeze mnie funkcji
      ("C-'" . nil)
	("C-c g" . #'my/wstaw-godz-min)
	("C-c w" . #'my/wiersz-podlicz)
	("C-c t" . #'my/tydzien-podlicz)))
  ;; patrz powyzej

#+END_SRC

* Org Roam

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/RoamNotes")
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-setup))

#+END_SRC

* Iedit

[[#table-of-contents][Go to: Table of Contents]]

(zamiana wszystkich wystapien slowa przy pomocy C-;)

#+BEGIN_SRC emacs-lisp

(use-package iedit
  :ensure t
  :defer t
  :diminish iedit-mode
  :pin melpa
  :bind
  ("C-;" . iedit-mode))

#+END_SRC

* Avy

[[#table-of-contents][Go to: Table of Contents]]

wyszukuje litere na ekranie i do niej skacze

#+BEGIN_SRC emacs-lisp

(use-package avy
  :ensure t
  :pin melpa-stable
  :defer t
  :diminish avy-mode
  :bind
  ("C-'" . avy-goto-char-2)
  ("C-c C-'" . avy-goto-char))

#+END_SRC

* Parenthesis and Brackets

[[#table-of-contents][Go to: Table of Contents]]

(zamykanie, podswietlanie pasujacych nawiasow)

#+BEGIN_SRC emacs-lisp

(electric-pair-mode 1) ; autoparied brackets

(use-package paredit
  :ensure t
  ;; tu bez pin melpa-stable bo nie moze znalezc pasujacej wersji
  :pin melpa
  :defer t
  :diminish paredit-mode
  :bind
  (;; przydatene przy edytowaniu kodu lispowego
   ("M-]" . paredit-forward-slurp-sexp)
   ("M-[" . paredit-forward-barf-sexp))
  :commands (enable-paredit-mode))

#+END_SRC

* Evil and Evil Like

[[#table-of-contents][Go to: Table of Contents]]

(Extensive Vi Layer)

#+BEGIN_SRC emacs-lisp

  (use-package evil
    :ensure t
    :pin melpa-stable
    ;; don't block emacs when starting, load evil immediately after startup
    :defer 0.1
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t) ;; required by evil-collection
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
    (setq evil-split-window-below t) ;; like vim's 'splitbelow'
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode)
    ;; set leader key in normal state
    (evil-set-leader 'normal (kbd "SPC"))
    (evil-define-key 'normal 'global
       (kbd "<leader>wv") 'evil-window-vsplit)
    (evil-define-key 'normal 'global
      (kbd "<leader>ws") 'evil-window-split)
    (evil-define-key 'normal 'global
      (kbd "<leader>fs") 'evil-write)
    (evil-define-key 'normal 'global
      (kbd "<leader>wq") 'delete-window)
    (evil-define-key 'normal 'global
      (kbd "<leader>nt") 'neotree-dir)
    (evil-define-key 'normal 'global
      (kbd "<leader>ff") 'helm-find-files)
    (evil-define-key 'normal 'global
    (kbd "<leader>d") 'dired)    ;; Use visual line motions even outside of visual-line-mode buffers
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
    (define-key evil-normal-state-map (kbd "<leader>ff") 'helm-find-files)
    (define-key evil-normal-state-map (kbd "<leader>d") 'dired)
    (add-hook 'haskell-mode-hook (lambda () (setq evil-auto-indent nil)))
  )

  ;; vim-like keybindings everywhere in emacs
  (use-package evil-collection
    :after evil
    :ensure t
    :pin melpa-stable
    :diminish evil-collection-mode
    :config
    (evil-collection-init))

  (use-package evil-surround
    :after evil
    :ensure t
    :pin melpa-stable
    :diminish evil-surround-mode
    :config (global-evil-surround-mode 1))

  (use-package elscreen
    :after evil
    :ensure t
    :pin melpa-stable
    :diminish elscreen-mode
    :bind
    (:map evil-normal-state-map
          ("C-w t" . elscreen-create)
          ("C-w x" . elscreen-kill)
          ("C-w e" . elscreen-previous)
          ("C-w r" . elscreen-next))
    :config (elscreen-start))

#+END_SRC

* Window Numbering

[[#table-of-contents][Go to: Table of Contents]]

Dzieki temu mamy wygodniejsze przechodzenie miedzy oknami.

(M-nr_okna), np. M-1, M-2\\
zamiast domyslnego Emacsowego C-x o (Ctrl+x o)

#+BEGIN_SRC emacs-lisp

(use-package window-numbering
  :ensure t
  :pin melpa-stable
  :diminish window-numbering-mode
  :config
  (window-numbering-mode))

#+END_SRC

* Nlinum Relative

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

(use-package nlinum-relative
  :ensure t
  :pin melpa
  :diminish nlinum-relative-mode
  :hook (prog-mode . nlinum-relative-mode))

#+END_SRC

* Helm

[[#table-of-contents][Go to: Table of Contents]]

(lepsze nawigowanie, wyszukiwanie plikow, itd.)

#+BEGIN_SRC emacs-lisp

(use-package helm
  :ensure t
  :pin melpa-stable
  :defer t
  :diminish helm-mode
  :bind
  (("C-x b" . helm-buffers-list)
   ("C-x C-f" . helm-find-files)
   ("M-x" . helm-M-x)
   ("C-x r b" . helm-filtered-bookmarks))
  :config
  (helm-mode 1))

(use-package helm-config)

#+END_SRC

* Crux

[[#table-of-contents][Go to: Table of Contents]]

(otwieranie pliku z powiazanej aplikacji systemowej)

#+BEGIN_SRC emacs-lisp

(use-package crux
  :ensure t
  :pin melpa
  :defer t
  :diminish crux-mode
  :bind
  ;; przydatne, po najechaniu na plik w Dired-zie
  ;; mozna go otworzyc w aplikacji systemowej (np. LibreOffice Calc)
  (("C-c o" . crux-open-with)))

#+END_SRC

* ESS

[[#table-of-contents][Go to: Table of Contents]]

(emacs speaks statistics)

Wymaga:
- R-a https://www.r-project.org/

#+BEGIN_SRC emacs-lisp

(use-package ess
  :ensure t
  :pin melpa-stable
  :defer t
  :diminish ess-mode
  :init
  ;; inaczej piszac snake casem "_" jest zamieniane na "<-"
  ;; (w pliku *.r i w konsoli)
  (add-hook 'ess-mode-hook
            (lambda ()
              (ess-toggle-underscore nil))))

#+END_SRC

* Python

[[#table-of-contents][Go to: Table of Contents]]

Bedac w pliku *.py -> M-x run-python

A potem (w pliku *.py) zaznaczamy region kodu i C-c C-c
(przesylamy do ewaluacji w konsoli)

Wymaga:
- Pyhon3
- virtualenv: ~pip3 install virtualenv~
- jedi: ~pip3 install jedi~
- json-rpc: ~pip3 install json-rpc~
- service-factory: ~pip3 install service_factory~
- black: ~pip3 install black~

#+BEGIN_SRC emacs-lisp

(use-package flycheck
  :ensure t
  :pin melpa-stable
  :diminish flycheck-mode
  :init
  (global-flycheck-mode t))

 ;; w razie problemow z autocomplete w plikach *.py
 ;; M-x elpy-config i sprawdzic czy ustawienia sa poprawne
(use-package elpy
  :ensure t
  :pin melpa-stable
  :defer t
  :diminish elpy-mode
  :init
  (elpy-enable)
  (add-hook 'elpy-mode-hook (lambda ()
			      (highlight-indentation-mode -1)))
  :hook (python-mode . elpy-mode)
  :config
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (setq elpy-rpc-python-command "python3")
  (setq elpy-rpc-timeout 2)
  (setq python-shell-interpreter "jupyter"
        python-shell-interpreter-args "console --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'python-shell-completion-native-disabled-interpreters
               "jupyter"))

(add-hook 'python-mode-hook 'yas-minor-mode)
(add-hook 'python-mode-hook 'flycheck-mode)

(with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

(defun python-mode-company-init ()
  (setq company-backends '((company-jedi
                                  company-etags
                                  company-dabbrev-code))))

;; wymaga instalacji jedi przez pip3
(use-package company-jedi
  :ensure t
  :pin melpa-stable
  :defer t
  :diminish company-jedi-mode
  :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-mode-company-init))

;; M-x pyenv-activate
(use-package pyvenv
  :ensure t
  :pin melpa-stable
  :diminish pyvenv-mode
  :hook ((python-mode . pyvenv-mode)))


;; blacken: python code formatter
;; uses black (pip3 install black)
(use-package blacken
  :ensure t
  :pin melpa
  :defer t
  :diminish blacken-mode
  :hook (python-mode . blacken-mode)
  :config
  (setq blacken-line-length 78))

#+END_SRC

* EIN

[[#table-of-contents][Go to: Table of Contents]]

(Emacs IPython Notebook)

[[https://jupyter.org/][Jupyter notebook]] w Emacsi-e (w trybie tekstowym, mostly)

Wymaga:
- jupyter notebook: ~pip3 install notebook~

#+BEGIN_SRC emacs-lisp

(use-package ein
  :ensure t
  :after elpy-mode
  ;; tu melpa-stable nie mialo zaleznosci websocket
  ;; w odpowiedniej wersji
  :pin melpa
  :defer t
  :diminish ein-mode)

  ;; wyswietlanie plotow w buforze Emacs-a
  ;; a nie w wyskakujacym oknie (domyslne)
  (setq ein:output-area-inlined-images t)
  ;; umieszczenie tego setq w use-package nic nie daje
  ;; (ani w :config, ani w :init, ani w :custom,
  ;; ani jako hook), nie wiem dlaczego, ale tak jest

#+END_SRC

* Zoom Window

[[#table-of-contents][Go to: Table of Contents]]

(Tmux-like window-zooming)

#+BEGIN_SRC emacs-lisp

(use-package zoom-window
  :ensure t
  :pin melpa-stable
  :diminish zoom-window-mode
  :bind
  (("C-x C-z" . zoom-window-zoom)))

#+END_SRC

* Magit

[[#table-of-contents][Go to: Table of Contents]]

Wymaga:
- [[https://git-scm.com/][Git]]

Fajna nakladka na Git-a.

Jak jest duzo plikow w danym commitcie to zauwazalnie zwalnia

#+BEGIN_SRC emacs-lisp

(use-package magit
  :ensure t
  :pin melpa-stable
  :defer t
  :diminish magit-mode
  :bind
  (("C-x g" . magit-status)))

;; evil-magit was removed from melpa (2021-02-01), it is now part of
;; evil-collection
;(use-package evil-magit
;  :ensure t
;  :pin melpa
;  :after magit
;  :diminish evil-magit-mode)

#+END_SRC

* Neotree

[[#table-of-contents][Go to: Table of Contents]]

~F8~ - wswietla panel po lewej stronie

W tym panelu jest struktura (tree) danego katalogu

zamykanie panelu ~q~

#+BEGIN_SRC emacs-lisp

(use-package neotree
  :ensure t
  :pin melpa-stable
  :diminish neotree-mode
  :bind
  (("<f8>" . neotree-dir))
  :config
  ;; H - przelacza/toggluje hidden files display
  (setq-default neo-show-hidden-files t))

#+END_SRC

* Haskell

[[#table-of-contents][Go to: Table of Contents]]

Wymaga:
- [[https://www.haskell.org/][Haskell]], najlepiej: ~apt-get install haskell-platform~

Bedac w otwartym pliku *.hs C-c C-l
otwiera repl-a haskella i laduje do niego aktualny plik

#+BEGIN_SRC emacs-lisp

(use-package haskell-mode
  :ensure t
  :pin melpa-stable
  :diminish haskell-mode)

(use-package haskell-indentation-mode
  :pin melpa-stable
  :diminish haskell-indentation-mode
  :hook haskell-mode)

(use-package interactive-haskell-mode
  :pin melpa-stable
  :diminish interactive-haskell-mode
  :hook haskell-mode
  :bind
  (:map haskell-interactive-mode-map
	("C-c C-k" . nil)
	("C-c M-o" . #'haskell-interactive-mode-clear)))

;; below haskell autocompletion
(use-package company-ghci
  :pin melpa
  :ensure t
  :defer t)

(push 'company-ghci company-backends)
(add-hook 'haskell-mode-hook 'company-mode)
;;; To get completions in the REPL
(add-hook 'haskell-interactive-mode-hook 'company-mode)

#+END_SRC

* Slime

[[#table-of-contents][Go to: Table of Contents]]

(Superior Lisp Interaction Mode for Emacs)

Wymaga:
- [[http://www.sbcl.org/][SBCL]]

#+BEGIN_SRC emacs-lisp

(use-package slime
  :ensure t
  :pin melpa-stable
  :diminish slime-mode
  :config
  (setq inferior-lisp-program "sbcl"))

(use-package common-lisp-snippets
  :ensure t
  :pin melpa)

#+END_SRC

* Dired

[[#table-of-contents][Go to: Table of Contents]]

(Directory Editor)

#+BEGIN_SRC emacs-lisp

;; kopiowanie nazwy pliku/sciezki do schowka
(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region
	 (point-min) (point-max)))
      (message filename))))

;;; dired jest domyslnie wbudowany w Emacs-a
;;; wiec nie trzeba go sciagac, ladowac, itd.
(use-package dired
  :diminish dired-mode
  :hook
  ;; wcisniecie "(" powoduje wlaczenie domyslnego wyswietlania
  ;; tj. wyswietlenie dodatkowych informacji
  ;; (display w stylu outputu komendy: ls -la)
  (dired-mode . dired-hide-details-mode)
  (dired-mode . nlinum-relative-mode)
  :bind
  (:map dired-mode-map
	("\y" . #'my-put-file-name-on-clipboard))
  :config
  ;; kopiowanie plikow miedzy 2 oknami z dired-em
  (setq dired-dwim-target t))

#+END_SRC

* Auto Complete

[[#table-of-contents][Go to: Table of Contents]]

(autouzupelnianie)

#+BEGIN_SRC emacs-lisp

;;; ponoc ac > company
;;; choc ja wole company
(use-package auto-complete
  :ensure t
  :defer t
  :diminish auto-compolete mode
  :config
  (setq ac-use-menu-map t)
  (setq ac-ignore-case nil)
  (define-key ac-menu-map "\C-n" 'ac-next)
  (define-key ac-menu-map "\C-p" 'ac-previous))

#+END_SRC

* Company

[[#table-of-contents][Go to: Table of Contents]]

(autouzupelnianie)

#+BEGIN_SRC emacs-lisp

(use-package company
  :ensure t
  :pin melpa-stable
  :diminish company-mode
  :bind (("C-c k" . company-complete)
         :map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous)
         ("<return>" . company-complete-selection)
         ("<escape>" . company-abort))
  :hook (scala-mode . company-mode)
  :config
  (global-company-mode t)
  (setq lsp-completion-provider :capf)
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 3)
  (setq company-auto-complete t)
  (setq company-show-numbers t)
  (setq company-quickhelp-mode 1)
  (setq company-quickhelp-mode 0.2)
  ;; aby sugestie byly case-sensitive
  (setq company-dabbrev-downcase nil)
  )

#+END_SRC

* Snippets

[[#table-of-contents][Go to: Table of Contents]]

kawalki kodu dla szybszego pisania for-ow, definicji funkcji, klas, itd.

dziala z roznymi jezykami programowania


#+BEGIN_SRC emacs-lisp

(use-package yasnippet
  :ensure t
  :pin melpa-stable
  :diminish yasnippet-mode
  :init
    (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t
  :pin melpa-stable
  :diminish yasnippet-snippets-mode)

#+END_SRC

* Origami

[[#table-of-contents][Go to: Table of Contents]]

(Zwijanie kodu)

#+BEGIN_SRC emacs-lisp

(use-package origami
  :ensure t
  :pin melpa
  :defer t
  :diminish origami-mode
  :hook prog-mode-hook)

#+END_SRC

* Eglot

[[#table-of-contents][Go to: Table of Contents]]

(Emacs polyglot, np. do Pythona)

Nie wiem czy to jest potrzebne do czegos
Chyba tego nie uzywam

#+BEGIN_SRC emacs-lisp

  ;(use-package eglot
  ; :ensure t
  ; :pin melpa
  ; :defer t)

#+END_SRC

* Rainbow Delimiters

[[#table-of-contents][Go to: Table of Contents]]

Ten sam poziom nawiasow ma ten sam kolor

Kolory sa subtelne

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
  :ensure t
  :pin melpa-stable
  :defer t
  :diminish rainbow-delimiters-mode
  :init
  (add-hook 'ein-setup-hook (lambda ()
			      (rainbow-delimiters-mode -1)))
  :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC
* Highlight Indent Guides

[[#table-of-contents][Go to: Table of Contents]]

Wyswietla linie pokazujaca poziom zaglebienia indentacji kodu

#+BEGIN_SRC emacs-lisp

(use-package highlight-indent-guides
  :ensure t
  :pin melpa
  :defer t
  :diminish highlight-indent-guides-mode
  :hook (prog-mode . highlight-indent-guides-mode)
  ;; wylaczenie highlight-indent-guides w ein-ie
  :init
  (add-hook 'ein-setup-hook (lambda ()
			      (highlight-indent-guides-mode -1)))
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-auto-character-face-perc 50))

#+END_SRC
* PDF Tools

[[#table-of-contents][Go to: Table of Contents]]

(lepsze przegladanie pdf-ow)

Wymaga (instalacja z terminala):
- both gcc and g++
- make
- automake
- autoconf
- libpng-dev
- zlib1g-dev
- libpoppler-glib-dev
- libpoppler-private-dev
- imagemagick

#+BEGIN_SRC emacs-lisp

(use-package pdf-tools
  :ensure t
  :pin melpa-stable
  :diminish pdf-tools-mode
  ;; wylaczenie nlinum moda w pdf-toolsie
  ;; inaczej 'dusi' Emacs-a
  :init
  (add-hook 'pdf-tools-setup-hook (lambda ()
				    (nlinum-relative-mode -1)))
  :config
  ;; initialise
  (pdf-tools-install)
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t))

#+END_SRC
* Emacs Code Browser

[[#table-of-contents][Go to: Table of Contents]]

(Emacs Code Browser)

#+BEGIN_SRC emacs-lisp

(use-package ecb
  :ensure t
  :pin melpa
  :defer t
  :diminish ecb-mode)

#+END_SRC

* Paste Text from Clipboard to Minibuffer

[[#table-of-contents][Go to: Table of Contents]]

Wymaga:
- xsel (instalacja z terminala)

Wklejanie za pomoca M-y

#+BEGIN_SRC emacs-lisp

(defun paste-from-x-clipboard()
  (interactive)
  (shell-command "xsel -ob" 1))

(defun my/paste-in-minibuffer ()
  (local-set-key (kbd "M-y") 'paste-from-x-clipboard))

(add-hook 'minibuffer-setup-hook 'my/paste-in-minibuffer)

#+END_SRC

* JavaScript and TypeScript

[[#table-of-contents][Go to: Table of Contents]]

Za: https://www.youtube.com/watch?v=0zuYCEzrchk

** node-js (moje funkcje)

wywoluje w shellu komende: ~node nazwa_otwartego_pliku.js~

lub

wywoluje w shellu komende: ~node nazwa_otwartego_pliku.js argumenty~

output wyswietla w minibuforze

#+BEGIN_SRC emacs-lisp

(defun my/plik-to-node ()
  "sends the current *.js file to node
   displays output in the *Messages* buffer"
  (interactive) ; do wywolania przez M-x
  (message
   (shell-command-to-string
    (format "node %s" (buffer-file-name)))))

(defun my/plik-i-args-to-node (argumenty)
  "sends the current *.js file to node
   first it asks for additoinal args separated by spaces
   displays output in the *Messages* buffer"
  (interactive "spodaj argumenty: ") ; do wywolania przez M-x
  (message
   (shell-command-to-string
    (format "node %s %s" (buffer-file-name) argumenty))))

#+END_SRC

** typescript (moje funkcje)

wywoluje w shellu komende: ~tsc nazwa_otwartego_pliku.ts~

output wyswietla w minibuforze

#+BEGIN_SRC emacs-lisp

(defun my/plik-to-tsc ()
  "sends the current *.ts file to tsc
   displays info about it in the *Messages* buffer"
  (interactive) ; do wywolania przez M-x
  (message (format "%s %s"
		   "transpilacja do JS zakonczona"
		   (shell-command-to-string
		    (format "tsc %s" (buffer-file-name))))))

(defun my/js-version-of-ts-to-node ()
  "sends the *.js file (current *.ts file conterpart) to node
   displays output in the *Messages* buffer"
  (interactive) ; do wywolania przez M-x
  (message
   (shell-command-to-string
    (format "node %s" (replace-regexp-in-string
		       ".ts$" ".js"
		       (buffer-file-name))))))
#+END_SRC

** RJSX-mode

#+BEGIN_SRC emacs-lisp

(use-package rjsx-mode
  :ensure t
  :pin melpa
  :diminish rjsx-mode
  :mode ("\\.js\\'")
  :bind
  (:map rjsx-mode-map
	("C-c n" . #'my/plik-to-node)
	("C-c C-n" . #'my/plik-i-args-to-node)
	("C-c e" . #'my/create-etags)
	("C-c t" . #'my/plik-to-tsc)))

#+END_SRC

** Tide

Wymaga:

- typescript: ~npm install -g typescript~

#+BEGIN_SRC emacs-lisp

    (use-package tide
      :ensure t
      :diminish tide-mode
      :after (typescript-mode company flycheck)
      :hook ((typescript-mode . tide-setup)
             (typescript-mode . tide-hl-identifier-mode))
      :config
      (setq company-tooltip-align-annotations t)
      :bind
      ;; uzywanie napisanej przeze mnie funkcji
      ;; my/plik-to-node (patrz wyzej)
      (:map tide-mode-map
            ("C-c n" . #'my/plik-to-node)
            ("C-c C-n" . #'my/plik-i-args-to-node)
            ("C-c e" . #'my/create-etags)
            ("C-c t" . #'my/plik-to-tsc)
            ("C-c C-t" . #'my/js-version-of-ts-to-node)))

    (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.json\\'" . typescript-mode))

    (add-hook 'typescript-mode-hook '(lambda () (emmet-mode 1)))

#+END_SRC

** Prettier

wymaga: prettier (~npm install -g prettier~)

#+BEGIN_SRC emacs-lisp

(use-package prettier-js
  :ensure t
  :pin melpa
  :defer t
  :diminish prettier-js-mode
  :after (:any rjsx-mode tide)
  :hook ((rjsx-mode . prettier-js-mode)
         (tide-mode . prettier-js-mode))
  :config
  (setq
   prettier-js-args
   '("--single-quote" "true"
     "--print-width" "120"))
  )

#+END_SRC

* Web Mode

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t
    :pin melpa-stable
    :defer t
    :diminish web-mode
    :after (emmet-mode))

  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  ;; (setq web-mode-enable-auto-closing t)

#+END_SRC

* Emmet Mode

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

(use-package emmet-mode
  :ensure t
  :defer t
  :diminish emmet-mode
  :pin melpa)

#+END_SRC
* Which Key

[[#table-of-contents][Go to: Table of Contents]]

pokazuje dostepne opcje/kontynuacje (kbd) po wcisnieciu danego klawisza

#+BEGIN_SRC emacs-lisp

(use-package which-key
  :ensure t
  :pin melpa-stable
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+END_SRC

* Emacs X Window Manager

[[#table-of-contents][Go to: Table of Contents]]

Experyment

Tu przez use-package nie zadziala
wiec M-x package-install exwm

"Super-&" - otwiera inne programy
"Super-0" - workspace number (default 0-3)

Na razie wykomentowane wole i3wm, spectrwm

#+BEGIN_SRC emacs-lisp

;(require 'exwm)
;(require 'exwm-config)
;(exwm-config-default)
;;; z nazwa monitora z xrandr z bash-a
;(setq exwm-randr-workspace-output-plist '(0 "eDP-1"))
;
;(require 'exwm-systemtray)
;(exwm-systemtray-enable)

#+END_SRC

* Autosave Files

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

; do odpalenia przy uzywaniu reacta
; inaczej pliki #cos_tam emacs-a go wykrzaczaja
(setq auto-save-default nil)
(setq create-lockfiles nil)

#+END_SRC
* Command Log Mode

[[#table-of-contents][Go to: Table of Contents]]

Wyswietla w bocznym buforze
nacisniete klawisze i funkcje z nimi powiazane

#+BEGIN_SRC emacs-lisp

(use-package command-log-mode
  :ensure t
  :pin melpa
  :bind
  ("C-c o" . nil)
  ("C-c o" . crux-open-with)
  :diminish command-log-mode)

#+END_SRC

* Dumb Jump

[[#table-of-contents][Go to: Table of Contents]]

Skakanie do definicji funkcji, itd

#+BEGIN_SRC emacs-lisp

(use-package dumb-jump
  :ensure t
  :pin melpa-stable
  :diminish dump-jump-mode)

#+END_SRC

* Language servers

[[#table-of-contents][Go to: Table of Contents]]

LSP - [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]

Na podstawie rady z [[https://www.youtube.com/watch?v=E-NAM9U5JYE][system crafters]]

Robienie z Emacs-a mojego customizowalnego IDE dla niektorych jezykow

#+BEGIN_SRC emacs-lisp

(use-package lsp-mode
  :pin melpa-stable
  :ensure t
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  ; :hook ((lsp-mode . lsp-enable-which-key-integration))
  :config
  (lsp-enable-which-key-integration t)
  ;;(setq lsp-completion-enable-additional-text-edit nil)
  :diminish lsp-mode)

;(setq company-lsp-cache-candidates nil)
;(setq lsp-enable-links nil)

#+END_SRC

* Programming Languages

[[#table-of-contents][Go to: Table of Contents]]

Programming languages working with Language Server Protocol

** Java

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

;(use-package lsp-java
;  :pin melpa-stable
;  :ensure t
;  :config
;  (add-hook 'java-mode-hook 'lsp)
;  :diminish lsp-java)

#+END_SRC

** Scala

[[#table-of-contents][Go to: Table of Contents]]

#+BEGIN_SRC emacs-lisp

  ;; most of the config based on:
  ;; https://scalameta.org/metals/docs/editors/emacs/
  ;; with my modifications

  ;; after installation open  *.scala file to make sure it works
  ;; and run M-x lsp-metals-doctor-run to troubleshoot potential configuration problems
  ;; useful: M-x lsp-format-buffer

  (setq lsp-metals-coursier-store-path
        (substitute-in-file-name "~/.local/share/coursier/bin/coursier"))
  (setq lsp-metals-metals-store-path
        (substitute-in-file-name "~/.local/share/coursier/bin/metals"))
  (setq lsp-metals-scalafmt-config-path
        (substitute-in-file-name "~/.local/share/coursier/bin/.scalafmt.conf"))

  ;; syntax coloring
  (use-package scala-mode
    :mode "\\.s\\(cala\\|bt\\)$"
    :interpreter ("scala" . scala-mode)
    )

  (use-package sbt-mode
    :commands sbt-start sbt-command
    :custom
    (sbt:default-command "testQuick")
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
    ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
    (setq sbt:program-options '("-Dsbt.supershell=false"))
    )

  (use-package lsp-mode
    ;; Optional - enable lsp-mode automatically in scala files
    :hook
    (scala-mode . lsp)
    (lsp-mode . lsp-lens-mode)
    :config (setq lsp-prefer-flymake nil))

  (use-package lsp-metals
    :ensure t)

  (use-package lsp-ui) ;; this is necessary to get info about compilation

#+END_SRC
